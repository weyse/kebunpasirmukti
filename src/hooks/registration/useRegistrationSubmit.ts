
import { useState } from 'react';
import { UseFormReturn } from 'react-hook-form';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';
import { FormSchema } from './useGuestRegistrationForm';
import { ClassType } from '../types/registrationTypes';
import { PackageParticipants } from './useSelectionState';

export type PaymentStatus = 'belum_lunas' | 'lunas';
export type VisitType = 'wisata_edukasi' | 'outbound' | 'camping' | 'field_trip' | 'penelitian' | 'lainnya';

export const useRegistrationSubmit = (
  form: UseFormReturn<FormSchema>,
  selectedClasses: ClassType[],
  selectedPackages: string[],
  packageParticipants: PackageParticipants,
  totalCost: number,
  discountedCost: number,
  extraBedCounts: Record<string, number>,
  nightsCount: number = 1
) => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (formValues: FormSchema) => {
    try {
      setIsSubmitting(true);
      
      // Calculate total guests including free teachers
      const totalGuests = Number(formValues.adult_count) + Number(formValues.children_count) + 
                         Number(formValues.teacher_count) + Number(formValues.free_of_charge_teacher_count || 0);
      
      // Map the boolean payment_status to the expected enum values
      const dbPaymentStatus: PaymentStatus = formValues.payment_status ? 'lunas' : 'belum_lunas';
      
      // Map visit type based on class selection
      let dbVisitType: VisitType = 'lainnya';
      if (selectedClasses.some(c => ['kb_tk', 'sd_1_2', 'sd_3_4', 'sd_5_6', 'smp', 'sma'].includes(c))) {
        dbVisitType = 'wisata_edukasi';
      }
      
      // Format visit_date and payment_date to ISO string format for database
      const visitDateForDB = formValues.visit_date ? formValues.visit_date.toISOString().split('T')[0] : null;
      const paymentDateForDB = formValues.payment_date ? formValues.payment_date.toISOString().split('T')[0] : null;
      
      // Calculate extra bed cost for inclusion in submission (accounting for nights count)
      const extraBedCost = Object.values(extraBedCounts).reduce((sum, count) => sum + (count * 160000 * nightsCount), 0);
      
      // Prepare package participants JSON data
      const packagesData = {
        selected_packages: selectedPackages,
        package_participants: packageParticipants
      };
      
      // Prepare data for submission
      const submissionData = {
        responsible_person: formValues.responsible_person,
        institution_name: formValues.institution_name,
        phone_number: formValues.phone_number,
        address: formValues.address,
        visit_date: visitDateForDB,
        adult_count: Number(formValues.adult_count),
        children_count: Number(formValues.children_count),
        teacher_count: Number(formValues.teacher_count),
        free_of_charge_teacher_count: Number(formValues.free_of_charge_teacher_count || 0),
        visit_type: dbVisitType,
        // We're still storing a single package_type for backward compatibility,
        // using the first selected package or null if none selected
        package_type: selectedPackages.length > 0 ? selectedPackages[0] : null,
        notes: formValues.notes || '',
        document_url: formValues.document_url || '',
        total_cost: totalCost,
        discount_percentage: Number(formValues.discount_percentage || 0),
        discounted_cost: discountedCost,
        down_payment: Number(formValues.down_payment || 0),
        payment_date: paymentDateForDB,
        bank_name: formValues.bank_name || '',
        payment_status: dbPaymentStatus,
        extra_bed_cost: extraBedCost,
        nights_count: nightsCount,
        // Store package participants as JSON in the packages_json column
        packages_json: packagesData
      };

      let registrationId;
      let isNewRegistration = !formValues.id;
      
      if (isNewRegistration) {
        // For new records - the order_id is generated by the database trigger
        const { data: insertedData, error } = await supabase
          .from('guest_registrations')
          .insert({
            ...submissionData,
            order_id: 'placeholder' // Will be replaced by database trigger
          })
          .select();
        
        if (error) throw new Error(error.message);
        if (insertedData && insertedData.length > 0) {
          registrationId = insertedData[0].id;
        }
      } else {
        // Update existing record
        const { data: updatedData, error } = await supabase
          .from('guest_registrations')
          .update(submissionData)
          .eq('id', formValues.id)
          .select();
        
        if (error) throw new Error(error.message);
        registrationId = formValues.id;
      }
      
      // If we have a registration ID, save the selected classes
      if (registrationId && selectedClasses.length > 0) {
        // First delete any existing classes for this registration
        if (!isNewRegistration) {
          await supabase
            .from('guest_classes')
            .delete()
            .eq('registration_id', registrationId);
        }
        
        // Then insert the new classes - make sure to type them correctly
        for (const classType of selectedClasses) {
          const { error: classError } = await supabase
            .from('guest_classes')
            .insert({
              registration_id: registrationId,
              class_type: classType
            });
          
          if (classError) throw new Error(classError.message);
        }
      }
      
      toast({
        title: "Success!",
        description: isNewRegistration ? "Guest registration created successfully." : "Guest registration updated successfully.",
      });
      
      return registrationId;
    } catch (error: any) {
      toast({
        title: "Error!",
        description: error.message,
        variant: "destructive",
      });
      throw error;
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    isSubmitting,
    handleSubmit,
  };
};
